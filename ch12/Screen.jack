// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int addr;
	static boolean color_black;
    /** Initializes the Screen. */
    function void init() {
		let addr = 16384;
		let color_black = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int i;
		var int value;
		let i = 0;
		let value = -1;
		
		if (~color_black){
			let value = 0;
		}
		
		while (i < 8161) {
			do Memory.poke(addr + i, value);
			let i = i + 1;
		}
		
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color_black = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int a;
		var int temp;
		var int i;
		var int value;
		
		let a = addr + (y * 32) + (x / 16);
		let x = x & 15;
		let temp = 1;
		let i = 0;
		

		while (i < x) {
			let temp = temp + temp;
			let i = i + 1;
		}

		let value = Memory.peek(a);

		if (color_black) {
			let value = value | temp;
		}else {
			let value = value & (~temp);
		}

		do Memory.poke(a,value);
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int x;
		var int y;
		
		var int a;
		var int b;
		
		var int dx;
		var int dy;
		
		var int diff;
		
		var int test;
		var boolean test_boolean;
		
		var boolean isNeg;
		
		let x = x1;
		let y = y1;
		
		let a = 0;
		let b = 0;
		
		let diff = 0;
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		let isNeg = false;
		if (dx < 0){
			let x = x2;
			let y = y2;
			let dx = x1 - x2;
			let dy = y1 - y2;
			
			if (dy < 0) {
				let dy = -dy;
				let isNeg = true;
			}
		}else {
			if (dy < 0){
				let dy = -dy;
				let isNeg = true;
			}
		}
		
		let test_boolean = false;
		let test = ((a < dx) & (a = dx)) | ((b < dy) & (b = dy));
		if (test = 0) {
			let test_boolean = true;
		}

		while (test_boolean){
			if (isNeg) {
				do Screen.drawPixel(x+a,y-b);
			}else {
				do Screen.drawPixel(x+a,y+b);
			}
			
			if (dx = 0) {
				let b = b + 1;
			} else {
				if (dy = 0) {
					let a = a + 1;
				}else {
					if (diff < 0) {
						let a = a + 1;
						let diff = diff + dy;
					}else {
						let b = b + 1;
						let diff = diff - dx;
					}
				}
			}

			
			let test_boolean = false;
			if (a < dx) {
				if (b < dy) {
					let test_boolean = true;
				}
				
				if (b = dy) {
					let test_boolean = true;
				}
			}
			
			if (a = dx) {
				if (b < dy) {
					let test_boolean = true;
				}
				
				if (b = dy) {
					let test_boolean = true;
				}
			}
		}
		
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while (y1 < (y2 + 1)) {
			do Screen.drawLine(x1,y1,x2,y1);
			let y1 = y1 + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		let dy = -r;
		
		while (dy < (r+1)) {
			do Screen.drawLine(x - Math.sqrt((r*r) - (dy * dy)), y + dy, x + Math.sqrt((r*r) - (dy*dy)),y + dy);
			let dy = dy + 1;
		}
		return;
    }
}
