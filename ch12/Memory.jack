// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static int heapBase;
	static int freeList;

    /** Initializes the class. */
    function void init() {
		let heapBase = 2048;
		let freeList = heapBase;
		do Memory.poke(freeList,20000);
		do Memory.poke(freeList+1,0);

		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		var Array a;
		let a = address;
		
		return a[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		var Array a;
		let a = address;
		let a[0] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int segment;
		var int slength;
		var int snext;
		var int prev;
		
		var int block;
		
		let segment = freeList;
		let slength = Memory.peek(segment);
		let snext = Memory.peek(segment+1);
		let prev = 0;
		
		while (~(slength > size)) {
			let prev = segment;
			let segment = snext;
			
			if (segment = 0){
				return 0;
			}
			
			let slength = Memory.peek(segment);
			let snext = Memory.peek(segment + 1);			
		}
		
		/** update the freeList */
		if (Memory.peek(segment) = size) {
			// check if next is null
			if (Memory.peek(segment+1) = 0) {
				// check if prev is not 0
				if (~(prev = 0)) {
					do Memory.poke(prev+1,0);
				}else {
					// it means no free Memory now
					let freeList = 0;
				}
			}else {
				if (~(prev = 0)) {
					do Memory.poke(prev+1,Memory.peek(segment+1));
				}else {
					// here it means alloc the head
					let freeList = Memory.peek(segment+1);
				}
			}
		}else {
			let segment = segment + (slength - size);
		}
		
		let block = segment + 1;
		do Memory.poke(segment, size + 1);
		
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		var int segment;
		var int slength;
		var int addr;
		var int next;
		
		let segment = o - 1;
		let slength = Memory.peek(segment);
		
		if (segment < freeList) {
			if (segment + slength = freeList) {
				let addr = Memory.peek(freeList);
				let freeList = segment;
				do Memory.poke(freeList,slength + addr);
			}else {
				do Memory.poke(segment + 1,freeList);
				let freeList = segment;
			}
			
			return;
		}
		
		/** Insert segment into the freeList */
		let addr = freeList;
		while (~(segment > addr)) {
			let next = Memory.peek(addr+1);
			if (next = 0) {
				if ((Memory.peek(addr) + addr) = segment) {
					do Memory.poke(addr,Memory.peek(addr) + slength);
					return;
				}else {
					do Memory.poke(addr+1,segment);
					do Memory.poke(segment+1,null);
					return;
				}
			}else {
				let addr = next;
			}
		}
		
		let next = Memory.peek(addr+1);
		if ((addr + Memory.peek(addr)) = segment) {
			do Memory.poke(addr,Memory.peek(addr) + slength);
		}else {
			do Memory.poke(addr+1,segment);
			do Memory.poke(segment+1,next);
		}
		
		return;
    }    
}
