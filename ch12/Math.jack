// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
		//do Output.printString("Math class init");
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sx;
		var int temp;
		var int j;
		var int sum;
		
		let sum = 0;
		let j = 0;
		let temp = 1;
		let sx = x;
		
		while (j < 16) {
			if (~((temp & y) = 0)) {
				let sum = sum + sx;
			}
			
			let sx = sx + sx;
			let temp = temp + temp;
			let j = j + 1;
		}
		
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int xx;
		var int yy;
		var int i;
		var int temp;
		
		let xx = Math.abs(x);
		let yy = Math.abs(y);
		
		if (xx < yy) {
			return 0;
		}
		
		if (xx = 0){
			return 0;
		}
		
		let i = 1;
		let temp = yy;
		
		while ((temp - xx) < 0){
			let temp = temp + yy;
			let i = i + 1;
		}
		
		if (x < 0 ) {
			if (y > 0) {
				return -i;
			}
		}
		
		if (y < 0) {
			if ( x > 0) {
				return -i;
			}
		}
		
		return i;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j;
		var int y;
		var int temp;
		var int i;
		var int ttem;
		
		let j = 7;
		let y = 0;
		
		while (j > -1) {
			let i = 0;
			let temp = 1;
			while (i < j) {
				let temp = temp + temp;
				let i = i + 1;
			}
			do Output.printString("sqrt tem :");
			let ttem = (y + temp) * (y + temp);	
			do Output.printInt(ttem);
			if (ttem < x){
				if (ttem > 0) {
					let y = y + temp;
				}
			}
			
			if (ttem = x) {
				if (ttem > 0) {
					let y = y + temp;
				}
			}
			
			let j = j - 1;
		}
		
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a > b) {
			return b;
		}
		
		return a;
    }
}
